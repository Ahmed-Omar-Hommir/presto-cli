// Mocks generated by Mockito 5.4.0 from annotations
// in presto_cli/test/project_checker/project_checker_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:presto_cli/src/models/file_manager/file_manager_failure.dart'
    as _i5;
import 'package:presto_cli/src/utils/file_manager.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IFileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFileManager extends _i1.Mock implements _i3.IFileManager {
  MockIFileManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<String>> findFilesByExtension(
    String? extension, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findFilesByExtension,
          [extension],
          {#path: path},
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
  @override
  _i4.Future<_i2.Either<_i5.FileManagerFailure, Map<dynamic, dynamic>>>
      readYaml(String? path) => (super.noSuchMethod(
            Invocation.method(
              #readYaml,
              [path],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.FileManagerFailure,
                        Map<dynamic, dynamic>>>.value(
                _FakeEither_0<_i5.FileManagerFailure, Map<dynamic, dynamic>>(
              this,
              Invocation.method(
                #readYaml,
                [path],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.FileManagerFailure, Map<dynamic, dynamic>>>);
  @override
  _i4.Future<
      _i2.Either<_i5.FileManagerFailure, Set<_i6.Directory>>> findPackages(
    _i6.Directory? dir, {
    _i4.Future<bool> Function(_i6.Directory)? where,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findPackages,
          [dir],
          {#where: where},
        ),
        returnValue: _i4.Future<
                _i2.Either<_i5.FileManagerFailure, Set<_i6.Directory>>>.value(
            _FakeEither_0<_i5.FileManagerFailure, Set<_i6.Directory>>(
          this,
          Invocation.method(
            #findPackages,
            [dir],
            {#where: where},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.FileManagerFailure, Set<_i6.Directory>>>);
}
