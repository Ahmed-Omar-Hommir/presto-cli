// Mocks generated by Mockito 5.4.0 from annotations
// in presto_cli/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i9;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i10;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mason_logger/mason_logger.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:presto_cli/presto_cli.dart' as _i5;
import 'package:presto_cli/src/logger.dart' as _i6;
import 'package:presto_cli/src/models/file_manager/file_manager_failure.dart'
    as _i8;
import 'package:presto_cli/src/utils/magic_lancher_strategies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProgress_1 extends _i1.SmartFake implements _i3.Progress {
  _FakeProgress_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_3 extends _i1.SmartFake implements _i2.File {
  _FakeFile_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_4 extends _i1.SmartFake implements Uri {
  _FakeUri_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_5 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_6 extends _i1.SmartFake
    implements _i2.RandomAccessFile {
  _FakeRandomAccessFile_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_7 extends _i1.SmartFake implements _i2.IOSink {
  _FakeIOSink_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_8 extends _i1.SmartFake implements _i2.FileStat {
  _FakeFileStat_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_9 extends _i1.SmartFake
    implements _i2.FileSystemEntity {
  _FakeFileSystemEntity_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProcess_10 extends _i1.SmartFake implements _i2.Process {
  _FakeProcess_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProcessResult_11 extends _i1.SmartFake implements _i2.ProcessResult {
  _FakeProcessResult_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IDirectoryFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDirectoryFactory extends _i1.Mock implements _i5.IDirectoryFactory {
  MockIDirectoryFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Directory get current => (super.noSuchMethod(
        Invocation.getter(#current),
        returnValue: _FakeDirectory_0(
          this,
          Invocation.getter(#current),
        ),
      ) as _i2.Directory);
}

/// A class which mocks [ILogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockILogger extends _i1.Mock implements _i6.ILogger {
  MockILogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void error(String? message) => super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void info(String? message) => super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void warn(String? message) => super.noSuchMethod(
        Invocation.method(
          #warn,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void write(String? message) => super.noSuchMethod(
        Invocation.method(
          #write,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Progress progress(String? message) => (super.noSuchMethod(
        Invocation.method(
          #progress,
          [message],
        ),
        returnValue: _FakeProgress_1(
          this,
          Invocation.method(
            #progress,
            [message],
          ),
        ),
      ) as _i3.Progress);
}

/// A class which mocks [IFileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFileManager extends _i1.Mock implements _i5.IFileManager {
  MockIFileManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<String>> findFilesByExtension(
    String? extension, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findFilesByExtension,
          [extension],
          {#path: path},
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);
  @override
  _i7.Future<_i4.Either<_i8.FileManagerFailure, Map<dynamic, dynamic>>>
      readYaml(String? path) => (super.noSuchMethod(
            Invocation.method(
              #readYaml,
              [path],
            ),
            returnValue: _i7.Future<
                    _i4.Either<_i8.FileManagerFailure,
                        Map<dynamic, dynamic>>>.value(
                _FakeEither_2<_i8.FileManagerFailure, Map<dynamic, dynamic>>(
              this,
              Invocation.method(
                #readYaml,
                [path],
              ),
            )),
          ) as _i7.Future<
              _i4.Either<_i8.FileManagerFailure, Map<dynamic, dynamic>>>);
  @override
  _i7.Future<
      _i4.Either<_i8.FileManagerFailure, Set<_i2.Directory>>> findPackages(
    _i2.Directory? dir, {
    _i7.Future<bool> Function(_i2.Directory)? where,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findPackages,
          [dir],
          {#where: where},
        ),
        returnValue: _i7.Future<
                _i4.Either<_i8.FileManagerFailure, Set<_i2.Directory>>>.value(
            _FakeEither_2<_i8.FileManagerFailure, Set<_i2.Directory>>(
          this,
          Invocation.method(
            #findPackages,
            [dir],
            {#where: where},
          ),
        )),
      ) as _i7.Future<_i4.Either<_i8.FileManagerFailure, Set<_i2.Directory>>>);
  @override
  _i7.Future<_i4.Either<_i8.FileManagerFailure, Map<String, dynamic>>> readJson(
          String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #readJson,
          [path],
        ),
        returnValue: _i7.Future<
                _i4.Either<_i8.FileManagerFailure, Map<String, dynamic>>>.value(
            _FakeEither_2<_i8.FileManagerFailure, Map<String, dynamic>>(
          this,
          Invocation.method(
            #readJson,
            [path],
          ),
        )),
      ) as _i7
          .Future<_i4.Either<_i8.FileManagerFailure, Map<String, dynamic>>>);
}

/// A class which mocks [IFileFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFileFactory extends _i1.Mock implements _i5.IFileFactory {
  MockIFileFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.File create(String? path) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [path],
        ),
        returnValue: _FakeFile_3(
          this,
          Invocation.method(
            #create,
            [path],
          ),
        ),
      ) as _i2.File);
}

/// A class which mocks [IYamlWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIYamlWrapper extends _i1.Mock implements _i5.IYamlWrapper {
  MockIYamlWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<dynamic, dynamic> loadYamlFile(String? yaml) => (super.noSuchMethod(
        Invocation.method(
          #loadYamlFile,
          [yaml],
        ),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i2.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_3(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i2.File);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_4(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);
  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);
  @override
  _i2.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_0(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i2.Directory);
  @override
  _i7.Future<_i2.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i7.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i7.Future<_i2.File>);
  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i2.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i7.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i7.Future<_i2.File>);
  @override
  _i2.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_3(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i2.File);
  @override
  _i7.Future<_i2.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i7.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i7.Future<_i2.File>);
  @override
  _i2.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_3(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i2.File);
  @override
  _i7.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);
  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
      ) as int);
  @override
  _i7.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i7.Future<DateTime>.value(_FakeDateTime_5(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i7.Future<DateTime>);
  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_5(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);
  @override
  _i7.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i7.Future<DateTime>.value(_FakeDateTime_5(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i7.Future<DateTime>);
  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_5(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);
  @override
  _i7.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i2.RandomAccessFile> open(
          {_i2.FileMode? mode = _i2.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i7.Future<_i2.RandomAccessFile>.value(_FakeRandomAccessFile_6(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i7.Future<_i2.RandomAccessFile>);
  @override
  _i2.RandomAccessFile openSync({_i2.FileMode? mode = _i2.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_6(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i2.RandomAccessFile);
  @override
  _i7.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i7.Stream<List<int>>.empty(),
      ) as _i7.Stream<List<int>>);
  @override
  _i2.IOSink openWrite({
    _i2.FileMode? mode = _i2.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_7(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i2.IOSink);
  @override
  _i7.Future<_i10.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i7.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
      ) as _i7.Future<_i10.Uint8List>);
  @override
  _i10.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i10.Uint8List(0),
      ) as _i10.Uint8List);
  @override
  _i7.Future<String> readAsString(
          {_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  String readAsStringSync({_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: '',
      ) as String);
  @override
  _i7.Future<List<String>> readAsLines(
          {_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);
  @override
  List<String> readAsLinesSync(
          {_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
      ) as List<String>);
  @override
  _i7.Future<_i2.File> writeAsBytes(
    List<int>? bytes, {
    _i2.FileMode? mode = _i2.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i7.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i7.Future<_i2.File>);
  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i2.FileMode? mode = _i2.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i2.File> writeAsString(
    String? contents, {
    _i2.FileMode? mode = _i2.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i7.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i7.Future<_i2.File>);
  @override
  void writeAsStringSync(
    String? contents, {
    _i2.FileMode? mode = _i2.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i7.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i7.Future<_i2.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i7.Future<_i2.FileStat>.value(_FakeFileStat_8(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i7.Future<_i2.FileStat>);
  @override
  _i2.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_8(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i2.FileStat);
  @override
  _i7.Future<_i2.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i7.Future<_i2.FileSystemEntity>.value(_FakeFileSystemEntity_9(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i7.Future<_i2.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Stream<_i2.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i7.Stream<_i2.FileSystemEvent>.empty(),
      ) as _i7.Stream<_i2.FileSystemEvent>);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i2.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_4(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);
  @override
  _i2.Directory get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeDirectory_0(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i2.Directory);
  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);
  @override
  _i2.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_0(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i2.Directory);
  @override
  _i7.Future<_i2.Directory> create({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#recursive: recursive},
        ),
        returnValue: _i7.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #create,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i7.Future<_i2.Directory>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i2.Directory> createTemp([String? prefix]) => (super.noSuchMethod(
        Invocation.method(
          #createTemp,
          [prefix],
        ),
        returnValue: _i7.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #createTemp,
            [prefix],
          ),
        )),
      ) as _i7.Future<_i2.Directory>);
  @override
  _i2.Directory createTempSync([String? prefix]) => (super.noSuchMethod(
        Invocation.method(
          #createTempSync,
          [prefix],
        ),
        returnValue: _FakeDirectory_0(
          this,
          Invocation.method(
            #createTempSync,
            [prefix],
          ),
        ),
      ) as _i2.Directory);
  @override
  _i7.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i7.Future<_i2.Directory> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i7.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i7.Future<_i2.Directory>);
  @override
  _i2.Directory renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeDirectory_0(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i2.Directory);
  @override
  _i7.Stream<_i2.FileSystemEntity> list({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: _i7.Stream<_i2.FileSystemEntity>.empty(),
      ) as _i7.Stream<_i2.FileSystemEntity>);
  @override
  List<_i2.FileSystemEntity> listSync({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listSync,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: <_i2.FileSystemEntity>[],
      ) as List<_i2.FileSystemEntity>);
  @override
  _i7.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i7.Future<_i2.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i7.Future<_i2.FileStat>.value(_FakeFileStat_8(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i7.Future<_i2.FileStat>);
  @override
  _i2.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_8(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i2.FileStat);
  @override
  _i7.Future<_i2.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i7.Future<_i2.FileSystemEntity>.value(_FakeFileSystemEntity_9(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i7.Future<_i2.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Stream<_i2.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i7.Stream<_i2.FileSystemEvent>.empty(),
      ) as _i7.Stream<_i2.FileSystemEvent>);
}

/// A class which mocks [IProcessManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProcessManager extends _i1.Mock implements _i5.IProcessManager {
  MockIProcessManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Process> start(
    String? executable,
    List<String>? arguments, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i2.ProcessStartMode? mode = _i2.ProcessStartMode.normal,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [
            executable,
            arguments,
          ],
          {
            #workingDirectory: workingDirectory,
            #environment: environment,
            #includeParentEnvironment: includeParentEnvironment,
            #runInShell: runInShell,
            #mode: mode,
          },
        ),
        returnValue: _i7.Future<_i2.Process>.value(_FakeProcess_10(
          this,
          Invocation.method(
            #start,
            [
              executable,
              arguments,
            ],
            {
              #workingDirectory: workingDirectory,
              #environment: environment,
              #includeParentEnvironment: includeParentEnvironment,
              #runInShell: runInShell,
              #mode: mode,
            },
          ),
        )),
      ) as _i7.Future<_i2.Process>);
  @override
  _i7.Future<_i2.ProcessResult> run(
    String? executable,
    List<String>? arguments, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i9.Encoding? stdoutEncoding,
    _i9.Encoding? stderrEncoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #run,
          [
            executable,
            arguments,
          ],
          {
            #workingDirectory: workingDirectory,
            #environment: environment,
            #includeParentEnvironment: includeParentEnvironment,
            #runInShell: runInShell,
            #stdoutEncoding: stdoutEncoding,
            #stderrEncoding: stderrEncoding,
          },
        ),
        returnValue: _i7.Future<_i2.ProcessResult>.value(_FakeProcessResult_11(
          this,
          Invocation.method(
            #run,
            [
              executable,
              arguments,
            ],
            {
              #workingDirectory: workingDirectory,
              #environment: environment,
              #includeParentEnvironment: includeParentEnvironment,
              #runInShell: runInShell,
              #stdoutEncoding: stdoutEncoding,
              #stderrEncoding: stderrEncoding,
            },
          ),
        )),
      ) as _i7.Future<_i2.ProcessResult>);
}

/// A class which mocks [Process].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcess extends _i1.Mock implements _i2.Process {
  MockProcess() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<int> get exitCode => (super.noSuchMethod(
        Invocation.getter(#exitCode),
        returnValue: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);
  @override
  _i7.Stream<List<int>> get stdout => (super.noSuchMethod(
        Invocation.getter(#stdout),
        returnValue: _i7.Stream<List<int>>.empty(),
      ) as _i7.Stream<List<int>>);
  @override
  _i7.Stream<List<int>> get stderr => (super.noSuchMethod(
        Invocation.getter(#stderr),
        returnValue: _i7.Stream<List<int>>.empty(),
      ) as _i7.Stream<List<int>>);
  @override
  _i2.IOSink get stdin => (super.noSuchMethod(
        Invocation.getter(#stdin),
        returnValue: _FakeIOSink_7(
          this,
          Invocation.getter(#stdin),
        ),
      ) as _i2.IOSink);
  @override
  int get pid => (super.noSuchMethod(
        Invocation.getter(#pid),
        returnValue: 0,
      ) as int);
  @override
  bool kill([_i2.ProcessSignal? signal = _i2.ProcessSignal.sigterm]) =>
      (super.noSuchMethod(
        Invocation.method(
          #kill,
          [signal],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ProcessResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcessResult extends _i1.Mock implements _i2.ProcessResult {
  MockProcessResult() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get exitCode => (super.noSuchMethod(
        Invocation.getter(#exitCode),
        returnValue: 0,
      ) as int);
  @override
  int get pid => (super.noSuchMethod(
        Invocation.getter(#pid),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [IFlutterCLI].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFlutterCLI extends _i1.Mock implements _i5.IFlutterCLI {
  MockIFlutterCLI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i5.CliFailure, _i5.ProcessResponse>> pubAdd({
    required String? packagePath,
    required Set<_i5.PackageDependency>? dependencies,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pubAdd,
          [],
          {
            #packagePath: packagePath,
            #dependencies: dependencies,
          },
        ),
        returnValue:
            _i7.Future<_i4.Either<_i5.CliFailure, _i5.ProcessResponse>>.value(
                _FakeEither_2<_i5.CliFailure, _i5.ProcessResponse>(
          this,
          Invocation.method(
            #pubAdd,
            [],
            {
              #packagePath: packagePath,
              #dependencies: dependencies,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.CliFailure, _i5.ProcessResponse>>);
  @override
  _i7.Future<_i4.Either<_i5.CliFailure, _i5.ProcessResponse>> createNewPackage({
    required String? packageName,
    String? packagePath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewPackage,
          [],
          {
            #packageName: packageName,
            #packagePath: packagePath,
          },
        ),
        returnValue:
            _i7.Future<_i4.Either<_i5.CliFailure, _i5.ProcessResponse>>.value(
                _FakeEither_2<_i5.CliFailure, _i5.ProcessResponse>(
          this,
          Invocation.method(
            #createNewPackage,
            [],
            {
              #packageName: packageName,
              #packagePath: packagePath,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.CliFailure, _i5.ProcessResponse>>);
  @override
  _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>> genL10N(
          _i2.Directory? workingDirectory) =>
      (super.noSuchMethod(
        Invocation.method(
          #genL10N,
          [workingDirectory],
        ),
        returnValue: _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>.value(
            _FakeEither_2<_i5.CliFailure, _i2.Process>(
          this,
          Invocation.method(
            #genL10N,
            [workingDirectory],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>);
  @override
  _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>> buildRunner(
    _i2.Directory? workingDirectory, {
    bool? deleteConflictingOutputs = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildRunner,
          [workingDirectory],
          {#deleteConflictingOutputs: deleteConflictingOutputs},
        ),
        returnValue: _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>.value(
            _FakeEither_2<_i5.CliFailure, _i2.Process>(
          this,
          Invocation.method(
            #buildRunner,
            [workingDirectory],
            {#deleteConflictingOutputs: deleteConflictingOutputs},
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>);
  @override
  _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>> clean(
          _i2.Directory? workingDirectory) =>
      (super.noSuchMethod(
        Invocation.method(
          #clean,
          [workingDirectory],
        ),
        returnValue: _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>.value(
            _FakeEither_2<_i5.CliFailure, _i2.Process>(
          this,
          Invocation.method(
            #clean,
            [workingDirectory],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>);
  @override
  _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>> pubGet(
          _i2.Directory? workingDirectory) =>
      (super.noSuchMethod(
        Invocation.method(
          #pubGet,
          [workingDirectory],
        ),
        returnValue: _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>.value(
            _FakeEither_2<_i5.CliFailure, _i2.Process>(
          this,
          Invocation.method(
            #pubGet,
            [workingDirectory],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>);
  @override
  _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>> upgrade(
          _i2.Directory? workingDirectory) =>
      (super.noSuchMethod(
        Invocation.method(
          #upgrade,
          [workingDirectory],
        ),
        returnValue: _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>.value(
            _FakeEither_2<_i5.CliFailure, _i2.Process>(
          this,
          Invocation.method(
            #upgrade,
            [workingDirectory],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>);
}

/// A class which mocks [IProjectChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProjectChecker extends _i1.Mock implements _i5.IProjectChecker {
  MockIProjectChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i5.ProjectCheckerFailure, bool>>
      checkInRootProject() => (super.noSuchMethod(
            Invocation.method(
              #checkInRootProject,
              [],
            ),
            returnValue:
                _i7.Future<_i4.Either<_i5.ProjectCheckerFailure, bool>>.value(
                    _FakeEither_2<_i5.ProjectCheckerFailure, bool>(
              this,
              Invocation.method(
                #checkInRootProject,
                [],
              ),
            )),
          ) as _i7.Future<_i4.Either<_i5.ProjectCheckerFailure, bool>>);
}

/// A class which mocks [IMagicCommandStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockIMagicCommandStrategy extends _i1.Mock
    implements _i11.IMagicCommandStrategy {
  MockIMagicCommandStrategy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>> runCommand(
          _i2.Directory? dir) =>
      (super.noSuchMethod(
        Invocation.method(
          #runCommand,
          [dir],
        ),
        returnValue: _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>.value(
            _FakeEither_2<_i5.CliFailure, _i2.Process>(
          this,
          Invocation.method(
            #runCommand,
            [dir],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i5.CliFailure, _i2.Process>>);
}

/// A class which mocks [IProcessLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProcessLogger extends _i1.Mock implements _i5.IProcessLogger {
  MockIProcessLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void stdout({
    required int? processId,
    required String? processName,
    required String? stdout,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #stdout,
          [],
          {
            #processId: processId,
            #processName: processName,
            #stdout: stdout,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stderr({
    required int? processId,
    required String? processName,
    required String? stderr,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #stderr,
          [],
          {
            #processId: processId,
            #processName: processName,
            #stderr: stderr,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IFcmService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFcmService extends _i1.Mock implements _i5.IFcmService {
  MockIFcmService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<String, _i4.None<dynamic>>> sendNotification({
    required Map<String, dynamic>? data,
    required String? serverKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNotification,
          [],
          {
            #data: data,
            #serverKey: serverKey,
          },
        ),
        returnValue: _i7.Future<_i4.Either<String, _i4.None<dynamic>>>.value(
            _FakeEither_2<String, _i4.None<dynamic>>(
          this,
          Invocation.method(
            #sendNotification,
            [],
            {
              #data: data,
              #serverKey: serverKey,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<String, _i4.None<dynamic>>>);
}

/// A class which mocks [FcmRemoteServiceApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFcmRemoteServiceApi extends _i1.Mock
    implements _i5.FcmRemoteServiceApi {
  MockFcmRemoteServiceApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> sendNotification({
    required Map<String, dynamic>? data,
    required String? serverKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNotification,
          [],
          {
            #data: data,
            #serverKey: serverKey,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [CliRemoteServiceApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockCliRemoteServiceApi extends _i1.Mock
    implements _i5.CliRemoteServiceApi {
  MockCliRemoteServiceApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String> getVersionDartFile() => (super.noSuchMethod(
        Invocation.method(
          #getVersionDartFile,
          [],
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
}

/// A class which mocks [CliService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCliService extends _i1.Mock implements _i5.CliService {
  MockCliService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<String, String>> getLastVersion() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastVersion,
          [],
        ),
        returnValue: _i7.Future<_i4.Either<String, String>>.value(
            _FakeEither_2<String, String>(
          this,
          Invocation.method(
            #getLastVersion,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<String, String>>);
}

/// A class which mocks [Progress].
///
/// See the documentation for Mockito's code generation for more information.
class MockProgress extends _i1.Mock implements _i3.Progress {
  MockProgress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void complete([String? update]) => super.noSuchMethod(
        Invocation.method(
          #complete,
          [update],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void fail([String? update]) => super.noSuchMethod(
        Invocation.method(
          #fail,
          [update],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void update(String? update) => super.noSuchMethod(
        Invocation.method(
          #update,
          [update],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void cancel() => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
